name: Expense Tracker CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    # Allow manual trigger
    inputs:
      environment:
        description: 'Deployment environment (dev/prod)'
        required: true
        default: 'dev'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8  # Add linting
        
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Run tests with coverage
      run: |
        python -m pytest tests/ --cov=app --cov-report=xml --cov-report=term
        
    - name: Check coverage threshold
      run: |
        COVERAGE=$(python -c "import xml.etree.ElementTree as ET; print(ET.parse('coverage.xml').getroot().attrib['line-rate'])")
        COVERAGE_PCT=$(python -c "print(round(float($COVERAGE) * 100, 2))")
        echo "Coverage: $COVERAGE_PCT%"
        if (( $(echo "$COVERAGE < 0.95" | bc -l) )); then
          echo "::warning::Coverage below 95% threshold: $COVERAGE_PCT%"
        fi
        
    - name: Upload coverage report to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true
    
    - name: Create deployment package
      run: |
        # Add gunicorn to requirements for Azure
        echo "gunicorn==20.1.0" >> requirements.txt
        
        # Create startup command file for Azure
        echo "gunicorn --bind=0.0.0.0 --timeout 600 app:app" > startup.txt
        
        # Create deployment directory with all necessary files
        mkdir -p deployment
        cp -r app.py templates static requirements.txt startup.txt deployment/
        
        # Create web.config for Azure
        cat > deployment/web.config << EOL
        <?xml version="1.0" encoding="utf-8"?>
        <configuration>
          <system.webServer>
            <handlers>
              <add name="PythonHandler" path="*" verb="*" modules="httpPlatformHandler" resourceType="Unspecified"/>
            </handlers>
            <httpPlatform processPath="%home%\site\wwwroot\env\Scripts\python.exe"
                 arguments="%home%\site\wwwroot\startup.txt"
                 stdoutLogEnabled="true"
                 stdoutLogFile="%home%\LogFiles\stdout"
                 startupTimeLimit="60">
              <environmentVariables>
                <environmentVariable name="PYTHONPATH" value="%home%\site\wwwroot"/>
              </environmentVariables>
            </httpPlatform>
          </system.webServer>
        </configuration>
        EOL
        
        # Create the zip package
        cd deployment && zip -r ../expense-tracker-deployment.zip . && cd ..

    - name: Upload deployment package as artifact
      uses: actions/upload-artifact@v3
      with:
        name: expense-tracker-app
        path: expense-tracker-deployment.zip

  deploy-to-azure:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') || github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
    - name: Download deployment package
      uses: actions/download-artifact@v3
      with:
        name: expense-tracker-app
    
    - name: Set up Azure CLI
      uses: azure/cli@v1
      
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Deploy to Azure Web App
      id: deploy-to-azure
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
        package: ./expense-tracker-deployment.zip
      
    - name: Configure Database
      if: steps.deploy-to-azure.outcome == 'success'
      run: |
        # Wait for deployment to fully complete
        sleep 30
        
        # Create database tables
        echo "Creating database tables..."
        az webapp ssh --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AZURE_WEBAPP_NAME }} \
          --command "cd /home/site/wwwroot && python -c 'from app import app, db; app.app_context().push(); db.create_all()'" \
          || echo "Failed to create database tables, may need manual intervention"

    - name: Post-deployment validation
      run: |
        # Wait for site to be ready
        echo "Waiting for site to be ready..."
        sleep 30
        
        # Perform health checks
        echo "Performing health check..."
        curl -f https://${{ secrets.AZURE_WEBAPP_NAME }}.azurewebsites.net/ || { 
          echo "Health check failed. Site may not be ready yet."
          sleep 30
          curl -f https://${{ secrets.AZURE_WEBAPP_NAME }}.azurewebsites.net/ || {
            echo "Site is not responding after retries."
            exit 1
          }
        }
